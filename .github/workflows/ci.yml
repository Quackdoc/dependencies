name: CI

on:
  push:
    branches:
      - master

jobs:
  build:
    strategy:
      matrix:
        build: [1]
        include:
          - os-name: windows
            os: windows-latest
            extract-tool: 7z x
            toolchain: Ninja
            build-tool: ninja
          #- os-name: mac
          #  os: macos-latest
          #  extract-tool: unzip
          #  toolchain: Unix Makefiles
          #  build-tool: make
    name: ${{ matrix.os-name }}
    runs-on: ${{ matrix.os }}
    env:
      DOWNLOAD_TOOL: curl -fLOSs --retry 2 --retry-delay 60
      BUILD_TYPE: RelWithDebInfo
      EXTRACT_TOOL: ${{ matrix.extract-tool }}
      CMAKE_TOOLCHAIN: ${{ matrix.toolchain }}
      PLATFORM: ${{ matrix.os-name }}
      BUILD_TOOL: ${{ matrix.build-tool }}
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v2

      - name: Enable Developer Command Prompt (Windows)
        uses: ilammy/msvc-dev-cmd@v1

      - name: Create install destination
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          mkdir -p install
          echo "INSTALL_DIR=$GITHUB_WORKSPACE/install" >> $GITHUB_ENV
          echo "BOOST_ROOT=$GITHUB_WORKSPACE/install" >> $GITHUB_ENV
          echo "$GITHUB_WORKSPACE/install" >> $GITHUB_PATH
          echo "$GITHUB_WORKSPACE/install/bin" >> $GITHUB_PATH

      - name: Build zlib
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL https://zlib.net/zlib1211.zip
          $EXTRACT_TOOL zlib1211.zip
          cd zlib-1.2.11
          mkdir build
          cd build
          cmake .. -G "$CMAKE_TOOLCHAIN" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE
          $BUILD_TOOL
          $BUILD_TOOL install

      - name: Build bzip2
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL https://sourceware.org/pub/bzip2/bzip2-1.0.8.tar.gz
          $EXTRACT_TOOL bzip2-1.0.8.tar.gz
          $EXTRACT_TOOL bzip2-1.0.8.tar
          cd bzip2-1.0.8
          if [ "$PLATFORM" == "windows" ]
          then
            nmake -f makefile.msc
            cp libbz2.lib "$INSTALL_DIR/lib"
            cp bzlib.h "$INSTALL_DIR/include"
          elif [ "$PLATFORM" == "mac" ]
          then
            ./configure --prefix="$INSTALL_DIR"
            make
            make install
          fi

      - name: Build NASM
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL https://www.nasm.us/pub/nasm/releasebuilds/2.15.05/nasm-2.15.05.tar.xz
          $EXTRACT_TOOL nasm-2.15.05.tar.xz
          $EXTRACT_TOOL nasm-2.15.05.tar
          cd nasm-2.15.05
          ./configure --prefix="$INSTALL_DIR"
          make
          if [ "$PLATFORM" == "windows" ]
          then
            cp nasm.exe "$INSTALL_DIR/bin"
            cp nasm.exe "$INSTALL_DIR/bin/nasmw.exe"
          elif [ "$PLATFORM" == "mac" ]
          then
            make install
          fi

      - name: Build Yasm
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL https://www.tortall.net/projects/yasm/releases/yasm-1.3.0.tar.gz
          $EXTRACT_TOOL yasm-1.3.0.tar.gz
          $EXTRACT_TOOL yasm-1.3.0.tar
          cd yasm-1.3.0
          ./configure --prefix="$INSTALL_DIR"
          make
          make install

      - name: Build libx264
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          echo Testing NASM
          $INSTALL_DIR/bin/nasm.exe --version
          git clone --depth 1 https://code.videolan.org/videolan/x264.git
          cd x264
          CC=cl ./configure --prefix="$INSTALL_DIR" --enable-shared
          make
          make install

      - name: Build libx265
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone https://bitbucket.org/multicoreware/x265_git
          cd x265_git/build/linux
          cmake -G "$CMAKE_TOOLCHAIN" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" ../../source
          $BUILD_TOOL
          $BUILD_TOOL install

      - name: Build libmp3lame
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL https://downloads.sourceforge.net/project/lame/lame/3.100/lame-3.100.tar.gz
          $EXTRACT_TOOL lame-3.100.tar.gz
          $EXTRACT_TOOL lame-3.100.tar
          cd lame-3.100
          if [ "$PLATFORM" == "windows" ]
          then
            # HACK: Prevent using GCC link instead of MSVC link
            mv /usr/bin/link /usr/bin/link.old
            nmake -f Makefile.MSVC MSVCVER=Win64 OFF=win64 MACHINE= dll
            mv /usr/bin/link.old /usr/bin/link

            cp output/libmp3lame.dll $INSTALL_DIR/bin
            cp output/libmp3lame.lib $INSTALL_DIR/lib
            mkdir -p $INSTALL_DIR/include/lame
            cp include/lame.h $INSTALL_DIR/include/lame
          elif [ "$PLATFORM" == "mac" ]
          then
            ./configure --prefix="$INSTALL_DIR" --enable-shared --enable-nasm
            make
            make install
          fi

      - name: Build libopus
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone https://github.com/xiph/opus.git
          cd opus
          git checkout v1.3.1
          mkdir build
          cd build
          cmake .. -G "$CMAKE_TOOLCHAIN" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE
          $BUILD_TOOL
          $BUILD_TOOL install

      - name: Build libvpx
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --depth 1 https://chromium.googlesource.com/webm/libvpx.git
          cd libvpx
          if [ "$PLATFORM" == "windows" ]
          then
            # Hack to force Win32 path instead of cygpath
            sed -i 's/pwd/pwd -W/g' build/make/configure.sh
          fi
          export INSTALL_DIR_ALL_FORWARD_SLASH="${INSTALL_DIR//\\//}"
          ./configure --prefix="$INSTALL_DIR_ALL_FORWARD_SLASH" --target=x86_64-win64-vs16 --disable-examples --disable-unit-tests --enable-vp9-highbitdepth --as=yasm
          make
          make install

      - name: Build FFmpeg
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL https://www.ffmpeg.org/releases/ffmpeg-4.3.2.tar.xz
          $EXTRACT_TOOL ffmpeg-4.3.2.tar.xz
          $EXTRACT_TOOL ffmpeg-4.3.2.tar
          cd ffmpeg-4.3.2
          ./configure --prefix=$INSTALL_DIR --toolchain=msvc --enable-gpl --enable-version3 --enable-libmp3lame --enable-libopus --enable-libvpx --enable-libx264 --enable-libx265 --disable-avx512
          make
          make install

      - name: Build OpenEXR
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone https://github.com/AcademySoftwareFoundation/openexr.git
          cd openexr
          git checkout v2.5.5
          mkdir build
          cd build
          cmake .. -G "$CMAKE_TOOLCHAIN" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DPYILMBASE_ENABLE=OFF -DOPENEXR_VIEWERS_ENABLE=OFF
          $BUILD_TOOL
          $BUILD_TOOL install

      - name: Build OpenColorIO
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone https://github.com/AcademySoftwareFoundation/OpenColorIO.git
          cd OpenColorIO
          git checkout v2.0.0
          mkdir build
          cd build
          cmake .. -G "$CMAKE_TOOLCHAIN" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DOCIO_BUILD_PYTHON=OFF -DOCIO_BUILD_APPS=OFF -DOCIO_BUILD_TESTS=OFF -DOCIO_BUILD_GPU_TESTS=OFF -DOCIO_BUILD_DOCS=OFF
          $BUILD_TOOL
          $BUILD_TOOL install

      - name: Build Boost
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL https://dl.bintray.com/boostorg/release/1.75.0/source/boost_1_75_0.7z
          $EXTRACT_TOOL boost_1_75_0.7z
          cd boost_1_75_0
          ./bootstrap.sh
          ./b2 install toolset=msvc address-model=64 variant=release link=shared --prefix=$INSTALL_DIR --with-filesystem --with-system --with-thread

      - name: Build libpng
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL https://downloads.sourceforge.net/project/libpng/libpng16/1.6.37/lpng1637.zip
          $EXTRACT_TOOL lpng1637.zip
          cd lpng1637
          mkdir build
          cd build
          cmake .. -G "$CMAKE_TOOLCHAIN" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE
          $BUILD_TOOL
          $BUILD_TOOL install

      - name: Build libtiff
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL http://download.osgeo.org/libtiff/tiff-4.2.0.zip
          $EXTRACT_TOOL tiff-4.2.0.zip
          cd tiff-4.2.0
          mkdir b
          cd b
          cmake .. -G "$CMAKE_TOOLCHAIN" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE
          $BUILD_TOOL
          $BUILD_TOOL install

      - name: Build libjpeg-turbo
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL https://downloads.sourceforge.net/project/libjpeg-turbo/2.0.6/libjpeg-turbo-2.0.6.tar.gz
          $EXTRACT_TOOL libjpeg-turbo-2.0.6.tar.gz
          $EXTRACT_TOOL libjpeg-turbo-2.0.6.tar
          cd libjpeg-turbo-2.0.6
          mkdir build
          cd build
          cmake .. -G "$CMAKE_TOOLCHAIN" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE
          $BUILD_TOOL
          $BUILD_TOOL install

      - name: Build LibRaw
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL https://www.libraw.org/data/LibRaw-0.20.2.zip
          $EXTRACT_TOOL LibRaw-0.20.2.zip
          cd LibRaw-0.20.2
          if [ "$PLATFORM" == "windows" ]
          then
            nmake -f Makefile.msvc
            cp "lib/libraw.lib" "$INSTALL_DIR/lib"
            cp "bin/libraw.dll" "$INSTALL_DIR/bin"
            mkdir -p "$INSTALL_DIR/include/libraw"
            cp libraw/*.h "$INSTALL_DIR/include/libraw"
          elif [ "$PLATFORM" == "mac" ]
          then
            ./configure --prefix="$INSTALL_DIR"
            make
            make install
          fi

      - name: Build OpenImageIO
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone https://github.com/OpenImageIO/oiio.git
          cd oiio
          git checkout v2.2.12.0
          mkdir build
          cd build
          cmake .. -G "$CMAKE_TOOLCHAIN" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DUSE_PYTHON=OFF
          $BUILD_TOOL
          $BUILD_TOOL install

      - name: Package
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          7z a win32.7z "$INSTALL_DIR/*"

      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v2
        with:
          name: Windows
          path: ${{ runner.workspace }}/win32.7z
