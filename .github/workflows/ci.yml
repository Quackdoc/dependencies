name: CI

on: push

env:
  DOWNLOAD_TOOL: curl -fLOSs --retry 2 --retry-delay 60

  QT_VERSION: 5.15.2
  ZLIB_VERSION: 1.2.13
  BZIP_VERSION: 1.0.8
  NASM_VERSION: 2.15.05
  YASM_VERSION: 1.3.0
  LAME_VERSION: "3.100"
  OPUS_VERSION: v1.3.1
  FFMPEG_VERSION: "5.0"
  OPENEXR_VERSION: "v3.1.5"
  OCIO_VERSION: v2.2.1
  TIFF_VERSION: 4.3.0
  JPEGTURBO_VERSION: 2.1.3
  GIF_VERSION: 5.2.1
  LIBRAW_VERSION: 0.20.2
  OIIO_VERSION: v2.3.19.0
  LIBPNG_VERSION: v1.6.37
  OPENSSL_VERSION: "OpenSSL_1_1_1s"
  X265_VERSION: 3.5
  LIBWEBP_VERSION: v1.2.2
  LIBVPX_VERSION: v1.11.0
  PORTAUDIO_VERSION: v19.7.0
  OTIO_VERSION: "v0.15"
  MODPLUG_VERSION: b7660b1d4fdec9ead25e8716c14cf77809861656

jobs:
  dependencies:
    strategy:
      matrix:
        include:
          #- arch: x86_64
          #  os: macos-11.0
          #  type: mac
          #  cflags: "-mmacosx-version-min=10.14 -arch x86_64"
          #- arch: arm64
          #  os: macos-11.0
          #  type: mac
          #  cflags: "-mmacosx-version-min=10.14 -arch arm64"
          - arch: x86_64
            os: windows-latest
            type: win
    name: ${{ matrix.os }} (${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    env:
      ARCH: ${{ matrix.arch }}
      CFLAGS: ${{ matrix.cflags }}
      CXXFLAGS: ${{ matrix.cflags }}
      LDFLAGS: ${{ matrix.cflags }}
      MACOSX_DEPLOYMENT_TARGET: 10.14
      BUILD_TYPE: Release
      CMAKE_OSX_ARCHITECTURES: ${{ matrix.arch }}
      TYPE: ${{ matrix.type }}
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3

      - name: Prepare (Windows)
        shell: bash
        if: matrix.type == 'win'
        run: |
          mkdir "$GITHUB_WORKSPACE/install"
          echo "INSTALL_DIR=$GITHUB_WORKSPACE/install" >> $GITHUB_ENV
          echo -e "$GITHUB_WORKSPACE/install\n$GITHUB_WORKSPACE/install/bin\n$GITHUB_WORKSPACE/install/lib\n$GITHUB_WORKSPACE/install/include\n$(cat $GITHUB_PATH)" > $GITHUB_PATH

      - name: Enable Developer Command Prompt (Windows)
        uses: ilammy/msvc-dev-cmd@v1.12.1
        if: matrix.type == 'win'

      - name: Prepare (macOS)
        shell: bash
        if: matrix.type == 'mac'
        run: |
          # Create directories
          sudo mkdir /opt/olive-editor
          sudo chmod 777 /opt/olive-editor
          echo "INSTALL_DIR=/opt/olive-editor" >> $GITHUB_ENV
          echo -e "/opt/olive-editor\n/opt/olive-editor/lib\n/opt/olive-editor/include\n$(cat $GITHUB_PATH)" > $GITHUB_PATH

          # Uninstall existing brew packages
          while [[ `brew list | wc -l` -ne 0 ]]; do
            for EACH in `brew list`; do
              brew uninstall --force --ignore-dependencies $EACH
            done
          done

          # Install tools
          brew install cmake ninja nasm yasm pkg-config

      - name: Build zlib (Windows)
        shell: bash
        if: matrix.type == 'win'
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL https://zlib.net/zlib-$ZLIB_VERSION.tar.xz
          tar xf zlib-$ZLIB_VERSION.tar.xz
          cd zlib-$ZLIB_VERSION
          mkdir build
          cd build
          cmake .. -G "Ninja" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE
          ninja
          ninja install
          touch "$INSTALL_DIR/include/unistd.h" # HACK

      - name: Build bzip2 (Windows)
        shell: bash
        if: matrix.type == 'win'
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL https://sourceware.org/pub/bzip2/bzip2-$BZIP_VERSION.tar.gz
          tar xzf bzip2-$BZIP_VERSION.tar.gz
          cd bzip2-$BZIP_VERSION
          nmake -f makefile.msc CFLAGS=" -DWIN32 -MT -Ox -D_FILE_OFFSET_BITS=64 -nologo"
          cp libbz2.lib "$INSTALL_DIR/lib/bz2.lib"
          cp bzlib.h "$INSTALL_DIR/include"

      - name: Install NASM (Windows)
        shell: bash
        if: matrix.type == 'win'
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL https://www.nasm.us/pub/nasm/releasebuilds/$NASM_VERSION/win64/nasm-$NASM_VERSION-win64.zip
          7z x nasm-$NASM_VERSION-win64.zip
          cd nasm-$NASM_VERSION
          cp nasm.exe "$INSTALL_DIR/bin"
          cp nasm.exe "$INSTALL_DIR/bin/nasmw.exe"
          echo "$INSTALL_DIR/bin"
          ls "$INSTALL_DIR/bin"

      - name: Install Yasm (Windows)
        shell: bash
        if: matrix.type == 'win'
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL https://www.tortall.net/projects/yasm/releases/yasm-$YASM_VERSION-win64.exe
          mv "yasm-$YASM_VERSION-win64.exe" "$INSTALL_DIR/bin/yasm.exe"

      - name: Build OpenSSL
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --branch $OPENSSL_VERSION --depth 1 https://github.com/openssl/openssl.git
          cd openssl

          if [ "$TYPE" == "win" ]
          then
            echo "$INSTALL_DIR/bin"
            ls "$INSTALL_DIR/bin"

            nasm --version
            export PATH=/c/Strawberry/perl/bin:$PATH
            perl Configure VC-WIN64A --prefix="$INSTALL_DIR" --openssldir="$INSTALL_DIR"
            # HACK: Prevent using GCC link instead of MSVC link
            mv /usr/bin/link /usr/bin/link.old
            nmake
            nmake install
            mv /usr/bin/link.old /usr/bin/link
          else
            perl Configure "darwin64-$ARCH-cc" --prefix="$INSTALL_DIR" --openssldir="$INSTALL_DIR"
            make depend
            make install
          fi

      - name: Build libx265
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --branch $X265_VERSION --depth 1 https://bitbucket.org/multicoreware/x265_git
          cd x265_git
          mkdir b
          cd b

          if [ "$ARCH" == "arm64" ]
          then
            # We set ENABLE_ASSEMBLY to OFF because their code is fucked and I can't figure it out.
            # One day it should be re-enabled for performance probably.
            cmake ../source -G "Ninja" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_OSX_ARCHITECTURES=$ARCH -DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/x265-arm64-crosscompile.cmake -DENABLE_ASSEMBLY=OFF
          else
            cmake ../source -G "Ninja" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR"
          fi

          ninja
          ninja install

          if [ "$TYPE" == "win" ]
          then
            mv "$INSTALL_DIR/lib/libx265.lib" "$INSTALL_DIR/lib/x265.lib"
          fi

      - name: Build PortAudio
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --branch $PORTAUDIO_VERSION --depth 1 https://github.com/PortAudio/portaudio.git
          cd portaudio
          mkdir b
          cd b
          cmake .. -G "Ninja" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_OSX_ARCHITECTURES=$ARCH
          ninja
          ninja install

      - name: Build libx264
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --depth 1 https://code.videolan.org/videolan/x264.git
          cd x264

          if [ "$TYPE" == "win" ]
          then
            CC=cl
          else
            HOST=$ARCH-darwin
          fi

          ./configure --prefix="$INSTALL_DIR" --enable-shared --disable-cli --host=$HOST
          make
          make install

          if [ "$TYPE" == "win" ]
          then
            mv "$INSTALL_DIR/lib/libx264.dll.lib" "$INSTALL_DIR/lib/libx264.lib"
          fi

      - name: Build libmp3lame
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL https://downloads.sourceforge.net/project/lame/lame/$LAME_VERSION/lame-$LAME_VERSION.tar.gz
          tar xzf lame-$LAME_VERSION.tar.gz
          cd lame-$LAME_VERSION


          if [ "$TYPE" == "win" ]
          then

            # HACK: Prevent using GCC link instead of MSVC link
            mv /usr/bin/link /usr/bin/link.old
            nmake -f Makefile.MSVC MSVCVER=Win64 OFF=win64 MACHINE= dll
            mv /usr/bin/link.old /usr/bin/link

            cp output/libmp3lame.dll $INSTALL_DIR/bin
            cp output/libmp3lame.lib $INSTALL_DIR/lib/mp3lame.lib
            mkdir -p $INSTALL_DIR/include/lame
            cp include/lame.h $INSTALL_DIR/include/lame

          else

            # Patch to remove legacy undefined export
            sed -i '' '/lame_init_old/d' include/libmp3lame.sym

            if [ "$ARCH" == "arm64" ]
            then
              HOST=aarch64
            else
              HOST=x86_64
            fi

            ./configure --enable-shared --disable-static --prefix="$INSTALL_DIR" --host=$HOST-apple-darwin CFLAGS="-arch $ARCH"
            make
            make install

          fi

      - name: Build libvpx
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --branch $LIBVPX_VERSION --depth 1 https://chromium.googlesource.com/webm/libvpx.git
          cd libvpx

          if [ "$TYPE" == "win" ]
          then
            export INSTALL_DIR_ALL_FORWARD_SLASH="${INSTALL_DIR//\\//}"
            ./configure --prefix="$INSTALL_DIR_ALL_FORWARD_SLASH" --target=x86_64-win64-vs16 --disable-examples --disable-unit-tests --enable-vp9-highbitdepth --enable-static-msvcrt --as=yasm
            ../dependencies/make
            ../dependencies/make install
            mv "$INSTALL_DIR/lib/x64/vpxmt.lib" "$INSTALL_DIR/lib/x64/vpx.lib"
          else
            ./configure --prefix="$INSTALL_DIR" --disable-examples --disable-unit-tests --enable-vp9-highbitdepth --as=yasm --target=$ARCH-darwin20-gcc
            make
            make install
          fi

      - name: Build libopus
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --branch $OPUS_VERSION --depth 1 https://github.com/xiph/opus.git
          cd opus
          mkdir build
          cd build
          cmake .. -G "Ninja" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_OSX_ARCHITECTURES=$ARCH
          ninja
          ninja install

      - name: Build libmodplug
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone https://github.com/Konstanty/libmodplug.git
          cd libmodplug
          git checkout $MODPLUG_VERSION

          if [ "$TYPE" == "win" ]
          then
            # Force CMake to produce a pkg-config file which FFmpeg requires
            sed -i '/if (NOT WIN32)/d' CMakeLists.txt
          else
            # Fix rpath on macOS
            git apply $GITHUB_WORKSPACE/modplug-set-rpath.diff
          fi

          mkdir build
          cd build
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DBUILD_SHARED_LIBS=ON -DCMAKE_OSX_ARCHITECTURES=$ARCH
          ninja
          ninja install

      - name: Build FFmpeg
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL https://www.ffmpeg.org/releases/ffmpeg-$FFMPEG_VERSION.tar.xz
          tar xf ffmpeg-$FFMPEG_VERSION.tar.xz
          cd ffmpeg-$FFMPEG_VERSION
          export PKG_CONFIG_PATH=$INSTALL_DIR/lib/pkgconfig

          if [ "$TYPE" == "win" ]
          then
            export INCLUDE=$INCLUDE\;$INSTALL_DIR/include
            export LIB=$LIB\;$INSTALL_DIR/lib\;$INSTALL_DIR/lib/x64
            export PATH=/c/Strawberry/perl/bin:../dependencies:$PATH
            EXTRA_FFMPEG_ARGS="$EXTRA_FFMPEG_ARGS --toolchain=msvc"
          else
            EXTRA_FFMPEG_ARGS="$EXTRA_FFMPEG_ARGS --target-os=darwin --arch=$ARCH --extra-cflags=\"-I$INSTALL_DIR/include -arch $ARCH\" --extra-ldflags=\"-L$INSTALL_DIR/lib -arch $ARCH -headerpad_max_install_names\""
            if [ "$ARCH" == "arm64" ]
            then
              EXTRA_FFMPEG_ARGS="$EXTRA_FFMPEG_ARGS --enable-cross-compile"
            fi
          fi

          ./configure \
            --prefix=$INSTALL_DIR \
            --enable-shared \
            --disable-static \
            --disable-programs \
            --enable-gpl \
            --enable-version3 \
            --enable-libmp3lame \
            --enable-libopus \
            --enable-libvpx \
            --enable-libx264 \
            --enable-libx265 \
            --enable-bzlib \
            --enable-libmodplug \
            $EXTRA_FFMPEG_ARGS \
            --disable-avx512
          make
          make install
          cd ..
          rm -rf ffmpeg-$FFMPEG_VERSION ffmpeg-$FFMPEG_VERSION.tar.xz

      - name: Build Imath
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          # Use the same version as OpenEXR to keep them synchronized
          git clone --branch $OPENEXR_VERSION --depth 1 https://github.com/AcademySoftwareFoundation/Imath.git
          cd Imath
          mkdir build
          cd build
          cmake .. -G "Ninja" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DPYTHON=OFF -DCMAKE_OSX_ARCHITECTURES=$ARCH
          ninja
          ninja install

      - name: Build OpenEXR
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --branch $OPENEXR_VERSION --depth 1 https://github.com/AcademySoftwareFoundation/openexr.git
          cd openexr
          mkdir build
          cd build
          cmake .. -G "Ninja" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DPYILMBASE_ENABLE=OFF -DOPENEXR_VIEWERS_ENABLE=OFF -DCMAKE_OSX_ARCHITECTURES=$ARCH -DCMAKE_PREFIX_PATH="$INSTALL_DIR"
          ninja
          ninja install

      - name: Build OpenColorIO
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --branch $OCIO_VERSION --depth 1 https://github.com/AcademySoftwareFoundation/OpenColorIO.git
          cd OpenColorIO
          mkdir build
          cd build
          cmake .. -G "Ninja" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DOCIO_BUILD_PYTHON=OFF -DOCIO_BUILD_APPS=OFF -DOCIO_BUILD_TESTS=OFF -DOCIO_BUILD_GPU_TESTS=OFF -DOCIO_BUILD_DOCS=OFF -DCMAKE_OSX_ARCHITECTURES=$ARCH -DCMAKE_PREFIX_PATH="$INSTALL_DIR"
          ninja
          ninja install
          cd ..
          rm -rf OpenColorIO

      - name: Build Boost
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL https://boostorg.jfrog.io/artifactory/main/release/1.77.0/source/boost_1_77_0.tar.gz
          tar xzf boost_1_77_0.tar.gz
          cd boost_1_77_0
          ./bootstrap.sh

          if [ "$TYPE" == "win" ]
          then
            BOOST_ARGS="toolset=msvc"
          fi

          if [ "$ARCH" == "arm64" ]
          then
            CPU=arm
          else
            CPU=x86
          fi

          ./b2 install $BOOST_ARGS address-model=64 architecture=$CPU variant=release link=shared cxxflags="-arch $ARCH" linkflags="-arch $ARCH" --prefix=$INSTALL_DIR --with-filesystem --with-system --with-thread

      - name: Build libpng
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --branch $LIBPNG_VERSION --depth 1 https://github.com/glennrp/libpng.git
          cd libpng
          git apply $GITHUB_WORKSPACE/png-osx-arm64.patch
          mkdir build
          cd build
          cmake .. -G "Ninja" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_OSX_ARCHITECTURES=$ARCH -DPNG_ARM_NEON=on
          ninja
          ninja install

      - name: Build libjpeg-turbo
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL https://downloads.sourceforge.net/project/libjpeg-turbo/$JPEGTURBO_VERSION/libjpeg-turbo-$JPEGTURBO_VERSION.tar.gz
          tar xzf libjpeg-turbo-$JPEGTURBO_VERSION.tar.gz
          cd libjpeg-turbo-$JPEGTURBO_VERSION
          mkdir build
          cd build
          cmake .. -G "Ninja" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_OSX_ARCHITECTURES=$ARCH
          ninja
          ninja install

      - name: Build libwebp
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --branch $LIBWEBP_VERSION --depth 1 https://chromium.googlesource.com/webm/libwebp
          cd libwebp
          mkdir build
          cd build
          cmake .. -G "Ninja" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_OSX_ARCHITECTURES=$ARCH \
            -DWEBP_BUILD_ANIM_UTILS=OFF \
            -DWEBP_BUILD_CWEBP=OFF \
            -DWEBP_BUILD_DWEBP=OFF \
            -DWEBP_BUILD_GIF2WEBP=OFF \
            -DWEBP_BUILD_IMG2WEBP=OFF \
            -DWEBP_BUILD_VWEBP=OFF \
            -DWEBP_BUILD_EXTRAS=OFF \
            -DWEBP_BUILD_WEBPINFO=OFF \
            -DWEBP_BUILD_WEBPMUX=OFF
          ninja
          ninja install

      - name: Build libtiff
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL https://download.osgeo.org/libtiff/tiff-$TIFF_VERSION.tar.gz
          tar xzf tiff-$TIFF_VERSION.tar.gz
          cd tiff-$TIFF_VERSION
          mkdir b
          cd b
          cmake .. -G "Ninja" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_OSX_ARCHITECTURES=$ARCH
          ninja
          ninja install

      - name: Build LibRaw
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          brew install automake libtool
          $DOWNLOAD_TOOL https://www.libraw.org/data/LibRaw-$LIBRAW_VERSION.tar.gz
          tar xzf LibRaw-$LIBRAW_VERSION.tar.gz
          cd LibRaw-$LIBRAW_VERSION

          if [ "$TYPE" == "win" ]
          then
            nmake -f Makefile.msvc
            cp "lib/libraw.lib" "$INSTALL_DIR/lib"
            cp "bin/libraw.dll" "$INSTALL_DIR/bin"
            mkdir -p "$INSTALL_DIR/include/libraw"
            cp libraw/*.h "$INSTALL_DIR/include/libraw"
          else
            autoreconf -i

            if [ "$ARCH" == "arm64" ]
            then
              HOST=aarch64
            else
              HOST=x86_64
            fi

            ./configure --disable-lcms --prefix="$INSTALL_DIR" --host=$HOST-apple-darwin
            make
            make install
          fi

      - name: Build giflib
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL https://downloads.sourceforge.net/project/giflib/giflib-$GIF_VERSION.tar.gz
          tar xzf giflib-$GIF_VERSION.tar.gz
          cd giflib-$GIF_VERSION

          if [ "$TYPE" == "mac" ]
            $DOWNLOAD_TOOL https://sourceforge.net/p/giflib/bugs/_discuss/thread/4e811ad29b/c323/attachment/Makefile.patch
            patch Makefile Makefile.patch
          fi

          make install CFLAGS="$CFLAGS" LDFLAGS="$LDFLAGS" PREFIX=$INSTALL_DIR

          if [ "$TYPE" == "mac" ]
            install_name_tool -id @rpath/libgif.dylib $INSTALL_DIR/lib/libgif.dylib
          fi

      - name: Build OpenImageIO
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --branch $OIIO_VERSION --depth 1 https://github.com/OpenImageIO/oiio.git
          cd oiio

          # HACK: We don't need freetype and it causes linking issues. You can't disable it in OIIO
          #       so we just remove it.
          git apply $GITHUB_WORKSPACE/oiio-remove-freetype.patch

          # HACK: Tries to link with system HEIF and OpenJP, which breaks arm64 cross compiles
          git apply $GITHUB_WORKSPACE/oiio-remove-heif-openjp.patch

          mkdir build
          cd build
          cmake .. -G "Ninja" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DUSE_PYTHON=OFF -DCMAKE_OSX_ARCHITECTURES=$ARCH \
            -DBoost_ROOT="$INSTALL_DIR" -DTIFF_ROOT="$INSTALL_DIR" -DCMAKE_PREFIX_PATH="$INSTALL_DIR" -DCMAKE_CXX_STANDARD=17
          ninja
          ninja install

      - name: Build OpenTimelineIO
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --depth 1 --branch $OTIO_VERSION https://github.com/PixarAnimationStudios/OpenTimelineIO.git
          cd OpenTimelineIO

          # Fixes linking on macOS
          git apply $GITHUB_WORKSPACE/otio-remove-install-name-dir.patch

          mkdir build
          cd build
          cmake .. -G "Ninja" -DCMAKE_CXX_STANDARD=17 -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DOTIO_PYTHON_INSTALL=OFF -DOTIO_FIND_IMATH=ON -DCMAKE_OSX_ARCHITECTURES=$ARCH
          ninja
          ninja install

      #- name: Setup tmate session
      #  uses: mxschmitt/action-tmate@v3

      - name: Build Qt
        shell: cmd
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --branch %QT_VERSION% --depth 1 https://code.qt.io/qt/qt5.git
          cd qt5
          perl init-repository --module-subset=qtbase,qttools

          cd ..
          rm -rf qt5

      - name: Build Qt (Mac)
        shell: bash
        working-directory: ${{ runner.workspace }}
        if: matrix.type == 'mac'
        run: |
          git clone --branch $QT_VERSION --depth 1 https://code.qt.io/qt/qt5.git
          cd qt5
          perl init-repository --module-subset=qtbase,qttools

          if [ "$TYPE" == "mac" ]
          then

            cd qtbase
            git apply $GITHUB_WORKSPACE/qt5-include-cgcolorspace.patch

            if [ "$ARCH" == "arm64" ]
            then
              cp -R mkspecs/macx-clang mkspecs/macx-clang-arm64
              echo "QMAKE_APPLE_DEVICE_ARCHS=arm64" >> mkspecs/macx-clang-arm64/qmake.conf
              EXTRA_QT_ARGS="-xplatform macx-clang-arm64"
            fi

            cd ..

            ./configure \
              -opensource -confirm-license -opengl desktop -nomake examples -nomake tests \
              -prefix "$INSTALL_DIR" -release -ssl -openssl-linked \
              -I "$INSTALL_DIR/include" -L "$INSTALL_DIR/lib" \
              $EXTRA_QT_ARGS
            make
            make install

          elif [ "$TYPE" == "win" ]

            INCLUDE=$INCLUDE:$INSTALL_DIR/include
            LIB=$LIB:$INSTALL_DIR/lib
            cmd /c configure.bat -opensource -confirm-license -opengl desktop -nomake examples -nomake tests -prefix "$INSTALL_DIR" -release -ssl -openssl
            nmake
            nmake install

          fi


          cd ..

          # Free up space
          rm -rf qt5

      - name: Deploy
        shell: bash
        working-directory: ${{ runner.workspace }}
        if: github.ref == 'refs/heads/master'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TRAVIS_REPO_SLUG: olive-editor/dependencies
          TRAVIS_COMMIT: ${{ github.sha }}
        run: |
          $DOWNLOAD_TOOL https://github.com/probonopd/uploadtool/raw/master/upload.sh
          tar czf "olive-dep-mac-$ARCH.tar.gz" "/opt/olive-editor"
          chmod +x upload.sh
          ./upload.sh "olive-dep-mac-$ARCH.tar.gz"
