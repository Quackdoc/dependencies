name: CI

on: push

env:
  DOWNLOAD_TOOL: curl -fLOSs --retry 2 --retry-delay 60

  QT_VERSION: 5.15.2
  ZLIB_VERSION: 1.2.11
  BZIP_VERSION: 1.0.8
  NASM_VERSION: 2.15.05
  YASM_VERSION: 1.3.0
  LAME_VERSION: "3.100"
  OPUS_VERSION: v1.3.1
  FFMPEG_VERSION: 4.3.2
  OPENEXR_VERSION: v2.5.5
  OCIO_VERSION: v2.0.0
  TIFF_VERSION: 4.2.0
  JPEGTURBO_VERSION: 2.0.6
  LIBRAW_VERSION: 0.20.2
  OIIO_VERSION: v2.2.12.0
  LIBPNG_VERSION: 1.6.37
  OPENSSL_VERSION: "OpenSSL_1_1_1j"
  X265_VERSION: 3.5
  LIBWEBP_VERSION: v1.2.0
  LIBVPX_VERSION: v1.10.0
  PORTAUDIO_VERSION: v19.7.0
  OTIO_VERSION: v0.14

jobs:
  mac:
    strategy:
      matrix:
        include:
          - arch: x86_64
            os: macos-10.15
          - arch: arm64
            os: macos-11.0
    name: macOS (${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    env:
      ARCH: ${{ matrix.arch }}
      CFLAGS: "-mmacosx-version-min=10.13 -arch ${{ matrix.arch }}"
      CXXFLAGS: "-mmacosx-version-min=10.13 -arch ${{ matrix.arch }}"
      LDFLAGS: "-mmacosx-version-min=10.13 -arch ${{ matrix.arch }}"
      MACOSX_DEPLOYMENT_TARGET: 10.13
      BUILD_TYPE: Release
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v2

      - name: Create install destination
        shell: bash
        run: |
          sudo mkdir /opt/olive-editor
          sudo chmod 777 /opt/olive-editor
          echo "INSTALL_DIR=/opt/olive-editor" >> $GITHUB_ENV
          echo -e "/opt/olive-editor\n/opt/olive-editor/lib\n/opt/olive-editor/include\n$(cat $GITHUB_PATH)" > $GITHUB_PATH

      # HACK: Don't use pre-installed Homebrew 3.0.10 from GitHub's virtual environment
      # Newer versions download packages from GitHub instead of Bintray which is shutting down
      - name: Set up Homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Install Ninja
        shell: bash
        run: |
          brew install ninja

      - name: Install NASM
        shell: bash
        run: |
          brew install nasm

      - name: Install Yasm
        shell: bash
        run: |
          brew install yasm

      - name: Build PortAudio
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --branch $PORTAUDIO_VERSION --depth 1 https://github.com/PortAudio/portaudio.git
          cd portaudio
          mkdir b
          cd b
          cmake .. -G "Ninja" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_OSX_ARCHITECTURES=$ARCH
          ninja
          ninja install

      - name: Build OpenSSL
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --branch $OPENSSL_VERSION --depth 1 https://github.com/openssl/openssl.git
          cd openssl
          perl Configure darwin64-$ARCH-cc --prefix="$INSTALL_DIR" --openssldir="$INSTALL_DIR"
          make depend
          make install

      - name: Build libx264
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --depth 1 https://code.videolan.org/videolan/x264.git
          cd x264
          ./configure --prefix="$INSTALL_DIR" --enable-shared --disable-cli --host=$ARCH-darwin
          make
          make install

      - name: Build libx265
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --branch $X265_VERSION --depth 1 https://bitbucket.org/multicoreware/x265_git
          cd x265_git/build/linux
          cmake -G "Ninja" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_OSX_ARCHITECTURES=$ARCH -DCMAKE_ASM_COMPILER=nasm ../../source
          ninja
          ninja install

      - name: Build libmp3lame
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL https://downloads.sourceforge.net/project/lame/lame/$LAME_VERSION/lame-$LAME_VERSION.tar.gz
          tar xzf lame-$LAME_VERSION.tar.gz
          cd lame-$LAME_VERSION

          # Patch to remove legacy undefined export
          sed -i '' '/lame_init_old/d' include/libmp3lame.sym

          if [ "$ARCH" == "arm64" ]
          then
            HOST=aarch64
          else
            HOST=x86_64
          fi

          ./configure --enable-shared --disable-static --prefix="$INSTALL_DIR" --host=$HOST-apple-darwin
          make
          make install

      - name: Build libopus
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --branch $OPUS_VERSION --depth 1 https://github.com/xiph/opus.git
          cd opus
          mkdir build
          cd build
          cmake .. -G "Ninja" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_OSX_ARCHITECTURES=$ARCH
          ninja
          ninja install

      - name: Build libvpx
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --branch $LIBVPX_VERSION --depth 1 https://chromium.googlesource.com/webm/libvpx.git
          cd libvpx
          ./configure --prefix="$INSTALL_DIR" --disable-examples --disable-unit-tests --enable-vp9-highbitdepth --as=yasm --host=$ARCH-darwin20-gcc
          make
          make install

      - name: Build libmodplug
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --depth 1 https://github.com/Konstanty/libmodplug.git
          cd libmodplug

          # Fix rpath on macOS
          git apply $GITHUB_WORKSPACE/modplug-set-rpath.diff

          mkdir build
          cd build
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DBUILD_SHARED_LIBS=ON -DCMAKE_OSX_ARCHITECTURES=$ARCH
          ninja
          ninja install

      - name: Build FFmpeg
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL https://www.ffmpeg.org/releases/ffmpeg-$FFMPEG_VERSION.tar.xz
          tar xf ffmpeg-$FFMPEG_VERSION.tar.xz
          cd ffmpeg-$FFMPEG_VERSION
          export INCLUDE=$INCLUDE\;$INSTALL_DIR/include
          export LIB=$LIB\;$INSTALL_DIR/lib\;$INSTALL_DIR/lib/x64
          export PKG_CONFIG_PATH=$INSTALL_DIR/lib/pkgconfig
          export PATH=/c/Strawberry/perl/bin:$PATH
          ./configure \
            --arch=$ARCH \
            --prefix=$INSTALL_DIR \
            --enable-shared \
            --disable-static \
            --disable-programs \
            --enable-gpl \
            --enable-version3 \
            --enable-libmp3lame \
            --enable-libopus \
            --enable-libvpx \
            --enable-libx264 \
            --enable-libx265 \
            --enable-bzlib \
            --enable-libmodplug \
            --disable-avx512
          make
          make install

      - name: Build OpenEXR
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --branch $OPENEXR_VERSION --depth 1 https://github.com/AcademySoftwareFoundation/openexr.git
          cd openexr
          mkdir build
          cd build
          cmake .. -G "Ninja" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DPYILMBASE_ENABLE=OFF -DOPENEXR_VIEWERS_ENABLE=OFF -DCMAKE_OSX_ARCHITECTURES=$ARCH
          ninja
          ninja install

      - name: Build OpenColorIO
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --branch $OCIO_VERSION --depth 1 https://github.com/AcademySoftwareFoundation/OpenColorIO.git
          cd OpenColorIO
          mkdir build
          cd build
          cmake .. -G "Ninja" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DOCIO_BUILD_PYTHON=OFF -DOCIO_BUILD_APPS=OFF -DOCIO_BUILD_TESTS=OFF -DOCIO_BUILD_GPU_TESTS=OFF -DOCIO_BUILD_DOCS=OFF -DCMAKE_OSX_ARCHITECTURES=$ARCH
          ninja
          ninja install

      - name: Build Boost
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL https://boostorg.jfrog.io/artifactory/main/release/1.77.0/source/boost_1_77_0.tar.gz
          tar xzf boost_1_77_0.tar.gz
          cd boost_1_77_0
          ./bootstrap.sh

          if [ "$ARCH" == "arm64" ]
          then
            CPU=arm
          else
            CPU=x86
          fi

          ./b2 install address-model=64 architecture=$CPU variant=release link=shared --prefix=$INSTALL_DIR --with-filesystem --with-system --with-thread

      - name: Build libpng
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL https://downloads.sourceforge.net/project/libpng/libpng16/$LIBPNG_VERSION/libpng-$LIBPNG_VERSION.tar.xz
          tar xf libpng-$LIBPNG_VERSION.tar.xz
          cd libpng-$LIBPNG_VERSION
          mkdir build
          cd build
          cmake .. -G "Ninja" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_OSX_ARCHITECTURES=$ARCH
          ninja
          ninja install

      - name: Build libtiff
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL https://download.osgeo.org/libtiff/tiff-$TIFF_VERSION.tar.gz
          tar xzf tiff-$TIFF_VERSION.tar.gz
          cd tiff-$TIFF_VERSION
          mkdir b
          cd b
          cmake .. -G "Ninja" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_OSX_ARCHITECTURES=$ARCH
          ninja
          ninja install

      - name: Build libjpeg-turbo
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL https://downloads.sourceforge.net/project/libjpeg-turbo/$JPEGTURBO_VERSION/libjpeg-turbo-$JPEGTURBO_VERSION.tar.gz
          tar xzf libjpeg-turbo-$JPEGTURBO_VERSION.tar.gz
          cd libjpeg-turbo-$JPEGTURBO_VERSION
          mkdir build
          cd build
          cmake .. -G "Ninja" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_OSX_ARCHITECTURES=$ARCH
          ninja
          ninja install

      - name: Build LibRaw
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          brew install automake
          $DOWNLOAD_TOOL https://www.libraw.org/data/LibRaw-$LIBRAW_VERSION.tar.gz
          tar xzf LibRaw-$LIBRAW_VERSION.tar.gz
          cd LibRaw-$LIBRAW_VERSION
          autoreconf -i

          if [ "$ARCH" == "arm64" ]
          then
            HOST=aarch64
          else
            HOST=x86_64
          fi

          ./configure --prefix="$INSTALL_DIR" --host=$HOST-apple-darwin
          make
          make install

      - name: Build libwebp
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --branch $LIBWEBP_VERSION --depth 1 https://chromium.googlesource.com/webm/libwebp
          cd libwebp
          mkdir build
          cd build
          cmake .. -G "Ninja" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_OSX_ARCHITECTURES=$ARCH
          ninja
          ninja install

      - name: Build OpenImageIO
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --branch $OIIO_VERSION --depth 1 https://github.com/OpenImageIO/oiio.git
          cd oiio

          # HACK: We don't need freetype and it causes linking issues. You can't disable it in OIIO
          #       so we just remove it.
          git apply $GITHUB_WORKSPACE/oiio-remove-freetype.patch

          mkdir build
          cd build
          cmake .. -G "Ninja" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DUSE_PYTHON=OFF -DCMAKE_OSX_ARCHITECTURES=$ARCH
          ninja
          ninja install

      - name: Build OpenTimelineIO
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --depth 1 --branch $OTIO_VERSION https://github.com/PixarAnimationStudios/OpenTimelineIO.git
          cd OpenTimelineIO

          # Fixes linking on macOS
          git apply $GITHUB_WORKSPACE/otio-remove-install-name-dir.patch

          mkdir build
          cd build
          cmake .. -G "Ninja" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DOTIO_PYTHON_INSTALL=OFF -DCMAKE_OSX_ARCHITECTURES=$ARCH
          ninja
          ninja install

      - name: Build Qt
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --branch $QT_VERSION --depth 1 https://code.qt.io/qt/qt5.git
          cd qt5
          perl init-repository --module-subset=qtbase,qtsvg,qttools
          ./configure -opensource -confirm-license -opengl desktop -nomake examples -nomake tests \
            -prefix "$INSTALL_DIR" -release -ssl -openssl-linked \
            -I "$INSTALL_DIR/include" -L "$INSTALL_DIR/lib" \
            QMAKE_APPLE_DEVICE_ARCHS=$ARCH
          make
          make install
          cd ..
          rm -rf qt5

      - name: Deploy
        shell: bash
        working-directory: ${{ runner.workspace }}
        if: github.ref == 'refs/heads/master'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TRAVIS_REPO_SLUG: olive-editor/dependencies
          TRAVIS_COMMIT: ${{ github.sha }}
        run: |
          $DOWNLOAD_TOOL https://github.com/probonopd/uploadtool/raw/master/upload.sh
          tar czf "olive-dep-mac-$ARCH.tar.gz" "/opt/olive-editor"
          chmod +x upload.sh
          ./upload.sh "olive-dep-mac-$ARCH.tar.gz"
