name: CI

on:
  push:
    branches:
      - master

env:
  DOWNLOAD_TOOL: curl -fLOSs --retry 2 --retry-delay 60
  BUILD_TYPE: RelWithDebInfo

jobs:
  build:
    name: Windows
    runs-on: windows-latest
    env:
      EXTRACT_TOOL: 7z x
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v2

      - name: Enable Developer Command Prompt (Windows)
        uses: ilammy/msvc-dev-cmd@v1

      - name: Create install destination
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          mkdir -p install
          echo "INSTALL_DIR=$GITHUB_WORKSPACE/install" >> $GITHUB_ENV
          echo "BOOST_ROOT=$GITHUB_WORKSPACE/install" >> $GITHUB_ENV
          echo "$GITHUB_WORKSPACE/install" >> $GITHUB_PATH

      - name: Build zlib
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL https://zlib.net/zlib1211.zip
          $EXTRACT_TOOL zlib1211.zip
          cd zlib-1.2.11
          mkdir build
          cd build
          cmake .. -G Ninja -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR -DCMAKE_BUILD_TYPE=$BUILD_TYPE
          ninja
          ninja install

      - name: Build bzip2
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL https://sourceware.org/pub/bzip2/bzip2-1.0.8.tar.gz
          $EXTRACT_TOOL bzip2-1.0.8.tar.gz
          $EXTRACT_TOOL bzip2-1.0.8.tar
          cd bzip2-1.0.8
          nmake -f makefile.msc
          cp libbz2.lib "$INSTALL_DIR/lib"
          cp bzlib.h "$INSTALL_DIR/include"

      - name: Build OpenEXR
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone https://github.com/AcademySoftwareFoundation/openexr.git
          cd openexr
          git checkout v2.5.5
          mkdir build
          cd build
          cmake .. -G Ninja -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DPYILMBASE_ENABLE=OFF -DOPENEXR_VIEWERS_ENABLE=OFF
          ninja
          ninja install

      - name: Build OpenColorIO
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone https://github.com/AcademySoftwareFoundation/OpenColorIO.git
          cd OpenColorIO
          git checkout v2.0.0
          mkdir build
          cd build
          cmake .. -G Ninja -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DOCIO_BUILD_PYTHON=OFF -DOCIO_BUILD_APPS=OFF -DOCIO_BUILD_TESTS=OFF -DOCIO_BUILD_GPU_TESTS=OFF -DOCIO_BUILD_DOCS=OFF
          ninja
          ninja install

      - name: Build Boost
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL https://dl.bintray.com/boostorg/release/1.75.0/source/boost_1_75_0.7z
          $EXTRACT_TOOL boost_1_75_0.7z
          cd boost_1_75_0
          ./bootstrap.sh
          ./b2 install toolset=msvc address-model=64 variant=release link=shared --prefix=$INSTALL_DIR --with-filesystem --with-system --with-thread

      - name: Build libpng
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL https://downloads.sourceforge.net/project/libpng/libpng16/1.6.37/lpng1637.zip
          $EXTRACT_TOOL lpng1637.zip
          cd lpng1637
          mkdir build
          cd build
          cmake .. -G Ninja -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR -DCMAKE_BUILD_TYPE=$BUILD_TYPE
          ninja
          ninja install

      - name: Build libtiff
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL http://download.osgeo.org/libtiff/tiff-4.2.0.zip
          $EXTRACT_TOOL tiff-4.2.0.zip
          cd tiff-4.2.0
          mkdir b
          cd b
          cmake .. -G Ninja -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR -DCMAKE_BUILD_TYPE=$BUILD_TYPE
          ninja
          ninja install

      - name: Build libjpeg-turbo
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL https://downloads.sourceforge.net/project/libjpeg-turbo/2.0.6/libjpeg-turbo-2.0.6.tar.gz
          $EXTRACT_TOOL libjpeg-turbo-2.0.6.tar.gz
          $EXTRACT_TOOL libjpeg-turbo-2.0.6.tar
          cd libjpeg-turbo-2.0.6
          mkdir build
          cd build
          cmake .. -G Ninja -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR -DCMAKE_BUILD_TYPE=$BUILD_TYPE
          ninja
          ninja install

      - name: Build LibRaw
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL https://www.libraw.org/data/LibRaw-0.20.2.zip
          $EXTRACT_TOOL LibRaw-0.20.2.zip
          cd LibRaw-0.20.2
          nmake -f Makefile.msvc
          cp "lib/libraw.lib" "$INSTALL_DIR/lib"
          cp "bin/libraw.dll" "$INSTALL_DIR/bin"
          mkdir -p "$INSTALL_DIR/include/libraw"
          cp libraw/*.h "$INSTALL_DIR/include/libraw"

      - name: Build OpenImageIO
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone https://github.com/OpenImageIO/oiio.git
          cd oiio
          git checkout v2.2.12.0
          mkdir build
          cd build
          cmake .. -G Ninja -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DUSE_PYTHON=OFF
          ninja
          ninja install

      - name: Package
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          7z a win32.7z "$INSTALL_DIR/*"

      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v2
        with:
          name: Windows
          path: ${{ runner.workspace }}/win32.7z
